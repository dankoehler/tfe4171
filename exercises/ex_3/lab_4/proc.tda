// @lang=tda @ts=2

module proc_property_suite(reset,clk, IR, REG_FILE,CONTROL_STATE,
dataIn, writeEnable, dataOut,dataAddr,instrAddr,instrIn);

input logic reset;
input logic clk;
input logic [15:0] IR;
input logic [7:0][7:0] REG_FILE;
input logic [2:0] CONTROL_STATE;
input logic [7:0] dataIn;
input logic writeEnable;
input logic [7:0] dataOut;
input logic [7:0] dataAddr;
input logic [15:0] instrAddr;
input logic [15:0] instrIn;

parameter c_IF  = 3'b001;
parameter c_ID  = 3'b010;
parameter c_EX  = 3'b011;
parameter c_MEM = 3'b100;
parameter c_WB  = 3'b101;

parameter c_ALU_REG = 4'b0001;

parameter c_ADD_IMM = 4'b0010;
parameter c_OR_IMM  = 4'b0011;

parameter c_LOAD    = 4'b0100;
parameter c_STORE   = 4'b0101;

parameter c_JUMP    = 4'b0110;
parameter c_BRANCH  = 4'b0111;

parameter c_ADD     = 3'b001;
parameter c_OR      = 3'b010;

// sequence definition for SVA property

`define true 1

`include "tidal.sv"

`begin_tda(ops)

// sequence definition for TiDAL property

// your operational properties

property or_imm;

logic [2:0] rs1_t;
logic [2:0] rd_t;
logic [5:0] imm_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(rs1_t, IR[11:9]) and
t ##0 set_freeze(rd_t, IR[8:6]) and
t ##0 set_freeze(imm_t, IR[5:0]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_OR_IMM

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM;

endproperty

assert_or_imm: assert property(@(posedge clk) disable iff (reset) or_imm); 

property or_reg;

logic [2:0] rs1_t;
logic [2:0] rs2_t;
logic [2:0] rd_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(rs1_t, IR[11:9]) and
t ##0 set_freeze(rs2_t, IR[8:6]) and
t ##0 set_freeze(rd_t, IR[5:3]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_ALU_REG

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM;

endproperty

assert_or_reg: assert property(@(posedge clk) disable iff (reset) or_reg);


property add_imm;

logic [2:0] rs1_t;
logic [2:0] rd_t;
logic [5:0] imm_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(rs1_t, IR[11:9]) and
t ##0 set_freeze(rd_t, IR[8:6]) and
t ##0 set_freeze(imm_t, IR[5:0]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_ADD_IMM

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM;

endproperty

assert_add_imm: assert property(@(posedge clk) disable iff (reset) add_imm);

property add_reg;

logic [2:0] rs1_t;
logic [2:0] rs2_t;
logic [2:0] rd_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(rs1_t, IR[11:9]) and
t ##0 set_freeze(rs2_t, IR[8:6]) and
t ##0 set_freeze(rd_t, IR[5:3]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_ALU_REG

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM;

endproperty

assert_add_reg: assert property(@(posedge clk) disable iff (reset) add_reg);

property load;

logic [2:0] rs1_t;
logic [2:0] rs2_t;
logic [2:0] rd_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(rs1_t, IR[11:9]) and
t ##0 set_freeze(rs2_t, IR[8:6]) and
t ##0 set_freeze(rd_t, IR[5:3]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_LOAD

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM and
t ##3 CONTROL_STATE == c_WB;

endproperty

assert_load: assert property(@(posedge clk) disable iff (reset) load);

property store;

logic [2:0] rs1_t;
logic [2:0] rs2_t;
logic [2:0] rd_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(rs1_t, IR[11:9]) and
t ##0 set_freeze(rs2_t, IR[8:6]) and
t ##0 set_freeze(rd_t, IR[5:3]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_STORE

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM and
t ##3 CONTROL_STATE == c_WB;

endproperty

assert_store: assert property(@(posedge clk) disable iff (reset) store);

property jump;

logic [11:0] offset_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(offset_t, IR[11:0]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_JUMP

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM;

endproperty

assert_jump: assert property(@(posedge clk) disable iff (reset) jump);

property branch;

logic [2:0] rs1_t;
logic [8:0] offset_t;
logic [7:0] content_rs1_t;

t ##0 set_freeze(rs1_t, IR[11:9]) and
t ##0 set_freeze(offset_t, IR[8:0]) and
t ##0 set_freeze(content_rs1_t, REG_FILE[rs1_t]) and
t ##0 CONTROL_STATE == c_ID and
t ##0 IR[15:12] == c_BRANCH

implies

t ##1 CONTROL_STATE == c_EX and
t ##2 CONTROL_STATE == c_MEM;

endproperty

assert_branch: assert property(@(posedge clk) disable iff (reset) branch);

`end_tda

endmodule

// your bind statement

bind proc proc_property_suite inst_proc_property_suite(.*);