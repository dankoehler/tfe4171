// @lang=sva @ts=8

module arbiter_property_suite(clk,reset,request_i,grant_o,free_i,state_s);

input logic clk;
input logic reset;
input logic [1:0] request_i;
input logic [1:0] grant_o;
input logic free_i;
input logic state_s;

parameter IDLE = 1'b0;
parameter BUSY = 1'b1;

// sequence definition

property reset_seq;
	@(posedge clk) reset |->  state_s == IDLE && grant_o == 2'b0;
endproperty

// property definition

property reset_;
	@(posedge clk) reset |->  state_s == IDLE && grant_o == 2'b0;
endproperty

property reset_grant;
	@(posedge clk) $past(reset) && request_i == 2'b11 |->  grant_o == 2'b0;
endproperty

property no_grant;
	disable iff (reset)
	@(posedge clk) request_i == 2'b00 |-> ##1 grant_o == 2'b0;
endproperty

property single_req;
	disable iff (reset)
	@(posedge clk) state_s == IDLE && free_i && $countones(request_i) == 1 |-> ##2 state_s == IDLE;
endproperty

property comp_req;
	disable iff (reset)
	@(posedge clk) $countones(request_i) == 2 && free_i |->  ##3 $past(grant_o[0], 2)^grant_o[0] || $past(grant_o[1], 2)^grant_o[1];
endproperty

// assert, assume statement

prop_reset_: assert property (reset_);
prop_reset_grant: assert property (reset_grant);
prop_no_grant: assert property (no_grant);
prop_single_req: assert property (single_req);
rop_comp_req: assert property (comp_req);

endmodule

// bind statement

bind arbiter arbiter_property_suite inst_arbiter_property_suite(.*);